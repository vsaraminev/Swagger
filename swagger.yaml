swagger: "2.0"
info:
  description: This is a sample Tuning Palce server..
  version: 1.0.0
  title: Swagger Tunning Place
tags: 
  - name: part
    description: "Everything about parts"
  - name: "project"
    description: "Everything about projects"
  - name: order
    description: "Everything about your orders"
  - name: user
    description: "Operations about user"
consumes:
- application/json
produces:
- application/json
paths:
  /part/create:
    post:
      tags:
        - "part"
      summary: Add a new part to the store
      description: ''
      operationId: addPart
      parameters:
        - in: body
          name: body
          description: Part object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Part'
      security:
        - Bearer: []
      responses:
        '200':
          description: OK
        '405':
          description: Invalid input
  /part/all:
    get:
      tags:
        - "part"
      summary: Find All Parts
      responses:
        '200':
          description: successful operation
          schema:
            $ref: "#/definitions/Part"
        '400':
          description: Invalid value
  /part/details/{id}:
    get:
      tags:
        - "part"
      description: "Returns a single part"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of part to return"
        required: true
        type: "string"
      security:
        - Bearer: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Part"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Part not found"
  /part/edit/{id}:
    put:
      tags:
        - "part"
      description: "Update a part"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the part to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated part object"
        required: true
        schema:
          $ref: "#/definitions/Part"
      security:
        - Bearer: []
      responses:
        200:
          description: "Part edited successfully!"
        404:
          description: "Part does not exists!" 
  /part/delete/{id}:
    delete:
      tags:
        - "part"
      description: "Delete a single part"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the part to delete"
        required: true
        type: "string"
      security:
        - Bearer: []
      responses:
        200:
          description: "Part deleted successfully!"
        404:
          description: "Part does not exists!" 
  /project/create:
    post:
      tags:
        - "project"
      summary: Add a new project
      description: ''
      operationId: addProject
      parameters:
        - in: body
          name: body
          description: Project object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Project'     
      security:
        - Bearer: []
      responses:
        '200':
          description: OK
        '405':
          description: Invalid input
  /project/all:
    get:
      tags:
        - "project"
      summary: Find All Projects
      security:
        - Bearer: []
      responses:
        '200':
          description: successful operation
          schema:
            $ref: "#/definitions/Project"
        '400':
          description: Invalid value
  /project/details/{id}:
    get:
      tags:
        - "project"
      description: "Returns a single project"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of project to return"
        required: true
        type: "string"
      security:
        - Bearer: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Project"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Project not found"
  /project/edit/{id}:
    put:
      tags:
        - "project"
      description: "Update a project"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the project to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated project object"
        required: true
        schema:
          $ref: "#/definitions/Project"
      security:
        - Bearer: []
      responses:
        200:
          description: "Project edited successfully!"
        404:
          description: "Project does not exists!" 
  /project/delete/{id}:
    delete:
      tags:
        - "project"
      description: "Delete a single project"
      parameters:
      - name: "id"
        in: "path"
        description: "Id of the project to delete"
        required: true
        type: "string"
      security:
        - Bearer: []
      responses:
        200:
          description: "Project deleted successfully!"
        404:
          description: "Project does not exists!"   
securityDefinitions:
  Bearer:
        type: apiKey
        name: Authorization
        in: header
definitions:
  Part:
    type: "object"
    required:
      - "title"
      - "model"
      - "year"
      - "description"
      - "price"
      - "image"
    properties:
      title:
        type: "string"
        minLength: 3
      model:
        type: "string"
        minLength: 3
      year:
        type: "integer"
        minimum: 1920
        maximum: 2019
      description:
        type: "string"
        minLength: 10
      price:
        type: "integer"
        minimum: 1
      image:
        type: "string"
  Project:
    type: "object"
    required:
      - "title"
      - "model"
      - "year"
      - "description"
      - "image"
    properties:
      title:
        type: "string"
        minLength: 3
      model:
        type: "string"
        minLength: 3
      year:
        type: "integer"
        minimum: 1920
        maximum: 2019
      description:
        type: "string"
        minLength: 10
      image:
        type: "string"
      comments:
        type: "array"
        items:
          type: "string"        
  User:
    type: "object"
    required:
      - "email"
      - "password"
      - "name"
    properties:
      email: 
        type: "string"
      name:
        type: "string"
      parts:
        type: "array"
        items:
          $ref: "#/definitions/Part"
      roles:
        type: "array"
        items:
          $ref: "#/definitions/User"
        default: "User"
      avatar:
        type: "string"
        default: "https://cdn5.vectorstock.com/i/1000x1000/51/99/icon-of-user-avatar-for-web-site-or-mobile-app-vector-3125199.jpg"
  Comment:
    type: "object"
    required:
      - "content"
    properties:
      content:
        type: "string"
  Order:
    type: "object"
    required:
      - "buyer"
      - "part"
    properties:
      buyer:
        $ref: "#/definitions/User"
      part:
        $ref: "#/definitions/Part"
    
