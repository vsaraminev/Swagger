/**
 * Swagger Tunning Place
 * This is a sample Tuning Palce server..
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Part'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Part'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggerTunningPlace) {
      root.SwaggerTunningPlace = {};
    }
    root.SwaggerTunningPlace.PartApi = factory(root.SwaggerTunningPlace.ApiClient, root.SwaggerTunningPlace.Part);
  }
}(this, function(ApiClient, Part) {
  'use strict';

  /**
   * Part service.
   * @module api/PartApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PartApi. 
   * @alias module:api/PartApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addPart operation.
     * @callback module:api/PartApi~addPartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new part to the store
     * 
     * @param {module:model/Part} body Part object that needs to be added to the store
     * @param {module:api/PartApi~addPartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPart = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addPart");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/part/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the partAllGet operation.
     * @callback module:api/PartApi~partAllGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Part} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find All Parts
     * @param {module:api/PartApi~partAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Part}
     */
    this.partAllGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Part;

      return this.apiClient.callApi(
        '/part/all', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the partDeleteIdDelete operation.
     * @callback module:api/PartApi~partDeleteIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a single part
     * @param {String} id Id of the part to delete
     * @param {module:api/PartApi~partDeleteIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.partDeleteIdDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partDeleteIdDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/part/delete/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the partDetailsIdGet operation.
     * @callback module:api/PartApi~partDetailsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Part} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single part
     * @param {String} id ID of part to return
     * @param {module:api/PartApi~partDetailsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Part}
     */
    this.partDetailsIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partDetailsIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Part;

      return this.apiClient.callApi(
        '/part/details/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
